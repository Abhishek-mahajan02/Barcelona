# -*- coding: utf-8 -*-
"""Barcelona Accidents .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yZk8nT440yCOKofjYtRRRcuxoy4Z7t6S

importing lib
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

"""reading csv data

"""

d = pd.read_csv("/content/accidents_2017.csv")

d.head()

d.describe()

list(d)

d1 = d['Weekday'].value_counts()
d1 = pd.DataFrame(d1)
d1

d1 = d1 / sum(d1['Weekday'])

d1

d1.sort_values( by ='Weekday')

d1 = d1 * 100

d1

std = np.std(d1['Weekday']) #calculating standard deviation

std

mean = np.mean(d1['Weekday'])

d1 = d1 - mean

d1/std

d2 = d.iloc[:,[4,8]]  #iloc helping in selecting particular cell weekday and part of the day 
d2.head()

d3 = d2.loc[d2['Weekday'] == 'Friday']

d3.head()

pd.unique(d['Part of the day'])

d4 = d3['Part of the day'].value_counts()

d4
d4 = pd.DataFrame(d4)
d4

d4 = d4 / sum(d4['Part of the day'])
d4 = d4 * 100
d4

d5 = d.iloc[:, 8]
d5.head()

d5 = d5.value_counts()
d5 = pd.DataFrame(d5)
d5
ei = d5
ei

d5 = d5 / sum(d5['Part of the day'])
d5 = d5 * 100
d5

d6 = d2.loc[d2['Weekday'] == 'Tuesday']
d6 = d6['Part of the day'].value_counts()
d6 = pd.DataFrame(d6)
d6

d6 = d6 / sum(d6['Part of the day'])
d6 = d6 * 100
d6

d7 = d.iloc[:, 6]
d7 = pd.DataFrame(d7)
d7.head()

w1 = d7.loc[d7['Day']<=7]
w2 = d7.loc[(d7['Day']>7) & (d7['Day']<=14)]
w3 = d7.loc[(d7['Day']>14) & (d7['Day']<=21)]
w4 = d7.loc[(d7['Day']>21) & (d7['Day']<=31)]
w1 = w1.describe()
w4.describe()

w1

w2

w3

w4

w = w1 + w2 + w3 + w4
w1 = w1 / w
w1 = w1 * 100
w2 = w2 / w
w2 = w2 * 100
w3 = w3 / w
w3 = w3 * 100
w4 = w4 / w
w4 = w4 * 100

w1

w2

w3

w4

e1 = d.loc[d['Serious injuries']!=0]

e1.head()

e2 = e1['Part of the day'].value_counts()
type(e2)
e2 = pd.DataFrame(e2)
e2 = e2 / sum(e2['Part of the day'])
e2 = e2 * 100
e2

e1 = e1.iloc[:, [1,3,4,6,7,8,10]]
e1.head()

e2

d5

ei

data = pd.read_csv("/content/accidents_2017.csv")
data.head(30)

category=data['Weekday'].value_counts()
plt.figure(figsize=[20,5])
x=category[:15].index
y=category[:15].values
sns.barplot(x, y)
plt.xlabel('days')
plt.ylabel('Number of accidents on that day')
plt.title('Accident per day')

category=data['Part of the day'].value_counts()
plt.figure(figsize=[20,5])
x=category[:15].index
y=category[:15].values
sns.barplot(x, y)
plt.xlabel('Part of the day')
plt.ylabel('Number of accidents')
plt.title('Accident by Part of the day')



category=data['Street'].value_counts()
plt.figure(figsize=[20,5])
x=category[:15].index
y=category[:15].values
sns.barplot(x, y)
plt.xlabel('street')
plt.ylabel('Number of accidents in that street')
plt.title('Accident by street')

category

category=data['District Name'].value_counts()
plt.figure(figsize=[20,5])
x=category[:15].index
y=category[:15].values
sns.barplot(x, y)
plt.xlabel('District Name')
plt.ylabel('Number of accidents in that district')
plt.title('Accident by district')

category=data['Month'].value_counts()
plt.figure(figsize=[12,5])
x=category[:15].index
y=category[:15].values
sns.barplot(x, y)
plt.xlabel('months')
plt.ylabel('number of accident')
plt.title('accident numbers by month')

category=data['Hour'].value_counts()
plt.figure(figsize=[12,5])
x=category[:15].index
y=category[:15].values
sns.barplot(x, y)
plt.xlabel('hours')
plt.ylabel('number of accident')
plt.title('accident numbers by hour')

category=data['Month'].value_counts()
plt.figure(figsize=[12,5])
x=category[:15].index
y=category[:15].values
sns.barplot(x, y)
plt.xlabel('months')
plt.ylabel('number of accident')
plt.title('accident numbers by month')

max_long, max_lat, min_long, min_lat=max(data['Longitude'].values), max(data['Latitude'].values), min(data['Longitude'].values), min(data['Latitude'].values)
print(max_long, min_long, max_lat, min_lat)

map_of_barcelona=np.zeros((542, 431), dtype=int) 

area=(min_long, max_lat, max_long, min_lat)

def Street_map(data, area, map_of_barcelona, s=10):#using longtitude and latitude on map
    fig, axs = plt.subplots(figsize=(30, 25))
    datafilter=data[data['Hour']>12]
    datafilter2=data[data['Hour']<=12]
    axs.scatter(datafilter.Longitude, datafilter.Latitude, alpha=1, color='red', label="Afternoon")
    axs.scatter(datafilter2.Longitude, datafilter2.Latitude, alpha=1,  color='blue', label="Before noon")
    axs.set_xlim(area[0], area[2])
    axs.set_ylim((area[3], area[1]))
    axs.set_title('accident points on map')
    axs.imshow(map_of_barcelona, zorder=1, extent=area)
Street_map(data, area, map_of_barcelona)

import seaborn as sns
sns.pairplot(data)

corr = data.corr()

plt.figure(figsize=(18, 15))
sns.heatmap(corr, annot=True, vmin=-1.0, cmap='mako')
plt.title("Correlation Heatmap")
plt.show()